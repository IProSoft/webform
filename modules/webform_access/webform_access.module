<?php

/**
 * @file
 * Provides webform access controls for webform nodes.
 */

use Drupal\Core\Hook\Attribute\LegacyHook;
use Drupal\webform_access\Hook\WebformAccessHooks;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\webform\Utility\WebformElementHelper;
use Drupal\webform\WebformInterface;
use Drupal\webform\WebformSubmissionInterface;
use Drupal\webform_access\Entity\WebformAccessGroup;

/**
 * Implements hook_webform_help_info().
 */
#[LegacyHook]
function webform_access_webform_help_info() {
  return \Drupal::service(WebformAccessHooks::class)->webformHelpInfo();
}

/* ************************************************************************** */
// Delete relationship hooks.
/* ************************************************************************** */

/**
 * Implements hook_user_delete().
 */
#[LegacyHook]
function webform_access_user_delete(EntityInterface $entity) {
  \Drupal::service(WebformAccessHooks::class)->userDelete($entity);
}

/**
 * Implements hook_node_delete().
 */
#[LegacyHook]
function webform_access_node_delete(EntityInterface $entity) {
  \Drupal::service(WebformAccessHooks::class)->nodeDelete($entity);
}

/**
 * Implements hook_field_config_delete().
 */
#[LegacyHook]
function webform_access_field_config_delete(EntityInterface $entity) {
  \Drupal::service(WebformAccessHooks::class)->fieldConfigDelete($entity);
}

/**
 * Implements hook_field_storage_config_delete().
 */
#[LegacyHook]
function webform_access_field_storage_config_delete(EntityInterface $entity) {
  \Drupal::service(WebformAccessHooks::class)->fieldStorageConfigDelete($entity);
}

/* ************************************************************************** */
// Access checking.
/* ************************************************************************** */

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Add webform access group to local task cacheability.
 *
 * @see \Drupal\Core\Menu\Plugin\Block\LocalTasksBlock::build
 */
#[LegacyHook]
function webform_access_menu_local_tasks_alter(&$data, $route_name) {
  return \Drupal::service(WebformAccessHooks::class)->menuLocalTasksAlter($data, $route_name);
}

/**
 * Implements hook_ENTITY_TYPE_access() for webform entities.
 */
#[LegacyHook]
function webform_access_webform_access(WebformInterface $webform, $operation, AccountInterface $account) {
  return \Drupal::service(WebformAccessHooks::class)->webformAccess($webform, $operation, $account);
}

/**
 * Implements hook_ENTITY_TYPE_access() for webform_submission entities.
 */
#[LegacyHook]
function webform_access_webform_submission_access(WebformSubmissionInterface $webform_submission, $operation, AccountInterface $account) {
  return \Drupal::service(WebformAccessHooks::class)->webformSubmissionAccess($webform_submission, $operation, $account);
}

/**
 * Implements hook_webform_submission_query_access_alter().
 */
#[LegacyHook]
function webform_access_webform_submission_query_access_alter(AlterableInterface $query, array $webform_submission_tables) {
  \Drupal::service(WebformAccessHooks::class)->webformSubmissionQueryAccessAlter($query, $webform_submission_tables);
}

/* ************************************************************************** */
// Webform access groups (node) entity.
/* ************************************************************************** */

/**
 * Implements hook_field_widget_single_element_form_alter().
 */
#[LegacyHook]
function webform_access_field_widget_single_element_form_alter(&$element, FormStateInterface $form_state, $context) {
  return \Drupal::service(WebformAccessHooks::class)->fieldWidgetSingleElementFormAlter($element, $form_state, $context);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
#[LegacyHook]
function webform_access_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  \Drupal::service(WebformAccessHooks::class)->formNodeFormAlter($form, $form_state, $form_id);
}

/**
 * Webform access group submit handler.
 */
function _webform_access_form_node_form_submit(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\webform\WebformEntityReferenceManagerInterface $entity_reference_manager */
  $entity_reference_manager = \Drupal::service('webform.entity_reference_manager');
  $node = $form_state->getFormObject()->getEntity();
  $field_names = $entity_reference_manager->getFieldNames($node);

  $record = [
    'entity_type' => 'node',
    'entity_id' => $node->id(),
  ];
  foreach ($field_names as $field_name) {
    $value = $form_state->getValue($field_name);
    // Handle hidden webform fields.
    if ($value === NULL) {
      continue;
    }

    $record['field_name'] = $field_name;
    // Delete all existing records.
    \Drupal::database()->delete('webform_access_group_entity')
      ->condition('entity_type', $record['entity_type'])
      ->condition('entity_id', $record['entity_id'])
      ->condition('field_name', $record['field_name'])
      ->execute();
    foreach ($value as $item) {
      $record['webform_id'] = $item['target_id'];
      foreach ($item['settings']['webform_access_group'] as $group_id) {
        $record['group_id'] = $group_id;
        // Insert new record.
        \Drupal::database()->insert('webform_access_group_entity')
          ->fields(['group_id', 'entity_type', 'entity_id', 'field_name', 'webform_id'])
          ->values($record)
          ->execute();
        // Invalidate cache tags.
        WebformAccessGroup::load($group_id)->invalidateTags();
      }
    }
  }
}

/* ************************************************************************** */
// Webform access group users.
/* ************************************************************************** */

/**
 * Implements hook_form_FORM_ID_alter() for user form.
 *
 * Add the webform access group to an individual user's account page.
 */
#[LegacyHook]
function webform_access_form_user_form_alter(&$form, FormStateInterface $form_state) {
  return \Drupal::service(WebformAccessHooks::class)->formUserFormAlter($form, $form_state);
}

/**
 * Submit callback for the user profile form to save the webform_access user setting.
 */
function _webform_access_user_profile_form_submit($form, FormStateInterface $form_state) {
  $account = $form_state->getFormObject()->getEntity();
  // Delete all existing records.
  \Drupal::database()->delete('webform_access_group_user')
    ->condition('uid', $account->id())
    ->execute();
  $record = ['uid' => $account->id()];
  $value = $form_state->getValue('webform_access_group');
  foreach ($value as $group_id) {
    $record['group_id'] = $group_id;
    // Insert new record.
    \Drupal::database()->insert('webform_access_group_user')
      ->fields(['group_id', 'uid'])
      ->values($record)
      ->execute();
    WebformAccessGroup::load($group_id)->invalidateTags();
  }

  // Invalidate 'webform_submission_list' cache tag when user is updated.
  // @see _webform_clear_webform_submission_list_cache_tag()
  Cache::invalidateTags(['webform_submission_list']);
}

/* ************************************************************************** */
// Webform access group helper functions.
/* ************************************************************************** */

/**
 * Build element used to select webform access groups.
 *
 * @param array $default_value
 *   Array of default group ids.
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 *
 * @return array
 *   Element used to select webform access groups.
 */
function _webform_access_group_build_element(array $default_value, array $form, FormStateInterface $form_state) {
  $element = [
    '#type' => 'webform_entity_select',
    '#title' => 'Access group',
    '#target_type' => 'webform_access_group',
    '#selection_handler' => 'default:webform_access_group',
    '#multiple' => TRUE,
    '#select2' => TRUE,
    '#default_value' => $default_value,
    '#access' => \Drupal::currentUser()->hasPermission('administer webform'),
  ];
  return WebformElementHelper::process($element);
}
